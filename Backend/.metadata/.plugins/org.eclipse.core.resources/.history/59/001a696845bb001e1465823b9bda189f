package com.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import com.user.entity.AuthRequest;
import com.user.entity.UserData;
import com.user.service.JwtService;
import com.user.service.UserDataServiceImp;

import java.util.List;
import java.util.Optional;

@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/auth")
public class UserController {
	@Autowired
	private UserDataServiceImp service;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private JwtService jwtService;

	@PostMapping("/addUser")
	public String addUser(@RequestBody UserData userData) {
		return service.addUser(userData);

	}

	@PostMapping("/login")
	public String addUser(@RequestBody AuthRequest authRequest) {
		Authentication authenticate = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword()));
		if (authenticate.isAuthenticated()) {
			return jwtService.generateToken(authRequest.getUserName());
		} else {
			throw new UsernameNotFoundException("Invalid user request");
		}
	}

	@GetMapping("/getUsers")
	@PreAuthorize("hasAuthority('ADMIN_ROLES')")
	public List<UserData> getAllUsers() {
		return service.getAllUser();
	}

	@GetMapping("/getUsers/{username}")
	@PreAuthorize("hasAuthority('USER_ROLES')")
	public Optional<UserData> getUsersByName(@PathVariable String username) {
		return service.getUser(username);
	}
}
